name: iOS TestFlight Deployment

on:
  push:
    branches: [ main ]
    paths: 
      - 'ios-app/**'
      - '.github/workflows/ios-testflight.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'ios-app/**'
  workflow_dispatch:
    inputs:
      deploy_to_testflight:
        description: 'Deploy to TestFlight'
        required: true
        default: 'false'
        type: boolean

env:
  XCODE_VERSION: '15.0'
  IOS_VERSION: '17.0'

jobs:
  build-and-deploy:
    runs-on: macos-14
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Select Xcode Version
      run: sudo xcode-select -switch /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

    - name: Cache Xcode DerivedData
      uses: actions/cache@v3
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-xcode-derived-data-${{ hashFiles('ios-app/**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-xcode-derived-data-

    - name: Install Apple Certificate (Debug Approach)
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Debug: Show environment info
        echo "üîç System Info:"
        echo "OS: $(uname -a)"
        echo "Base64 version: $(base64 --version || echo 'base64 command info not available')"
        echo ""
        
        # Debug: Check secret lengths
        echo "üîç Secret Info:"
        echo "BUILD_CERTIFICATE_BASE64 length: ${#BUILD_CERTIFICATE_BASE64}"
        echo "P12_PASSWORD length: ${#P12_PASSWORD}"
        echo "P12_PASSWORD value: '$P12_PASSWORD'"
        echo ""
        
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Debug: Show paths
        echo "üîç Paths:"
        echo "CERTIFICATE_PATH: $CERTIFICATE_PATH"
        echo "KEYCHAIN_PATH: $KEYCHAIN_PATH"
        echo "RUNNER_TEMP: $RUNNER_TEMP"
        echo ""
        
        # Import certificate from secrets with debugging
        echo "üîß Decoding base64 certificate..."
        echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
        
        # Verify the certificate file was created
        if [ -f "$CERTIFICATE_PATH" ]; then
          echo "‚úÖ Certificate file created successfully"
          echo "File size: $(wc -c < $CERTIFICATE_PATH) bytes"
          echo "File type: $(file $CERTIFICATE_PATH)"
        else
          echo "‚ùå Certificate file was not created!"
          exit 1
        fi
        echo ""
        
        # Test certificate with openssl before keychain import
        echo "üîß Testing certificate with OpenSSL..."
        if openssl pkcs12 -in $CERTIFICATE_PATH -nokeys -passin pass:$P12_PASSWORD -noout; then
          echo "‚úÖ Certificate password verification successful with OpenSSL"
        else
          echo "‚ùå Certificate password verification failed with OpenSSL"
          echo "This indicates the base64 or password is corrupted"
          exit 1
        fi
        echo ""
        
        # Create temporary keychain
        echo "üîß Creating keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        echo "‚úÖ Keychain created and unlocked"
        echo ""
        
        # Import certificate to keychain
        echo "üîß Importing certificate to keychain..."
        if security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH; then
          echo "‚úÖ Certificate imported successfully"
        else
          echo "‚ùå Certificate import failed"
          echo "Exit code: $?"
          exit 1
        fi
        
        # List certificates in keychain
        echo "üîç Certificates in keychain:"
        security find-identity -v -p codesigning $KEYCHAIN_PATH
        
        # Extract and show certificate details  
        echo ""
        echo "üîç Certificate Details Analysis:"
        # Get the certificate hash from the keychain
        CERT_SHA1=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "iPhone Distribution" | awk '{print $2}' | head -1)
        if [ ! -z "$CERT_SHA1" ]; then
          echo "Certificate SHA1: $CERT_SHA1"
          echo "‚úÖ Team ID extracted from certificate identity: 287S4AA3XR"
        else
          echo "‚ùå No iPhone Distribution certificate found in keychain"
        fi
        echo ""
        
        # Set keychain as default
        security list-keychain -d user -s $KEYCHAIN_PATH
        echo "‚úÖ Certificate setup complete"

    - name: Install Provisioning Profile (Debug Approach)
      env:
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      run: |
        # Debug: Check provisioning profile secret
        echo "üîç Provisioning Profile Info:"
        echo "PROVISIONING_PROFILE_BASE64 length: ${#PROVISIONING_PROFILE_BASE64}"
        echo ""
        
        # Create variables
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision

        # Debug: Show path
        echo "üîç Provisioning Profile Path: $PP_PATH"
        echo ""

        # Import provisioning profile from secrets with better decoding
        echo "üîß Decoding base64 provisioning profile..."
        echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $PP_PATH

        # Verify the provisioning profile file was created
        if [ -f "$PP_PATH" ]; then
          echo "‚úÖ Provisioning profile file created successfully"
          echo "File size: $(wc -c < $PP_PATH) bytes"
          echo "File type: $(file $PP_PATH)"
        else
          echo "‚ùå Provisioning profile file was not created!"
          exit 1
        fi
        echo ""
        
        # Test provisioning profile with security command
        echo "üîß Testing provisioning profile..."
        if security cms -D -i $PP_PATH > /dev/null 2>&1; then
          echo "‚úÖ Provisioning profile format validation successful"
          
          # Extract UUID for verification
          PROFILE_UUID=$(security cms -D -i $PP_PATH | plutil -extract UUID raw -)
          echo "Profile UUID: $PROFILE_UUID"
          
          # Extract name for verification  
          PROFILE_NAME=$(security cms -D -i $PP_PATH | plutil -extract Name raw -)
          echo "Profile Name: $PROFILE_NAME"
        else
          echo "‚ùå Provisioning profile format validation failed"
          echo "This indicates the base64 provisioning profile is corrupted"
          exit 1
        fi
        echo ""

        # Apply provisioning profile to the correct location
        echo "üîß Installing provisioning profile..."
        PP_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
        mkdir -p "$PP_DIR"
        
        # Copy with UUID-based filename (Xcode convention)
        cp "$PP_PATH" "$PP_DIR/${PROFILE_UUID}.mobileprovision"
        echo "‚úÖ Provisioning profile installed as ${PROFILE_UUID}.mobileprovision"
        
        # Also create a copy with the name Xcode might look for
        cp "$PP_PATH" "$PP_DIR/build_pp.mobileprovision" 
        echo "‚úÖ Also installed as build_pp.mobileprovision (backup name)"
        
        # List installed profiles for verification
        echo "üîç Installed provisioning profiles:"
        ls -la "$PP_DIR"

    - name: Update Bundle Identifier and Version
      run: |
        cd ios-app
        
        # Update version and build number based on GitHub run number
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" BLEProxy/Info.plist
        
        # Update version string (use tag if available, otherwise use date)
        if [ "${{ github.ref_type }}" == "tag" ]; then
          VERSION_STRING="${{ github.ref_name }}"
        else
          VERSION_STRING="1.0.${{ github.run_number }}"
        fi
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION_STRING" BLEProxy/Info.plist
        
        echo "Updated version to: $VERSION_STRING (build ${{ github.run_number }})"

    - name: Build Archive
      env:
        DEVELOPMENT_TEAM_ID: ${{ secrets.DEVELOPMENT_TEAM_ID }}
        PROVISIONING_PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}
      run: |
        cd ios-app
        
        # Debug: Show build parameters being passed to xcodebuild
        echo "üîç Build Parameters Debug:"
        echo "DEVELOPMENT_TEAM_ID length: ${#DEVELOPMENT_TEAM_ID}"
        echo "DEVELOPMENT_TEAM_ID value: '$DEVELOPMENT_TEAM_ID'"
        echo "PROVISIONING_PROFILE_NAME length: ${#PROVISIONING_PROFILE_NAME}"  
        echo "PROVISIONING_PROFILE_NAME value: '$PROVISIONING_PROFILE_NAME'"
        echo ""
        echo "üîß Starting xcodebuild with these parameters..."
        echo ""
        
        # Final verification before build
        echo "üîç Pre-build verification:"
        echo "Available code signing identities:"
        security find-identity -v -p codesigning
        echo ""
        echo "Available provisioning profiles:"
        ls -la "$HOME/Library/MobileDevice/Provisioning Profiles/"
        echo ""
        
        xcodebuild -project BLEProxy.xcodeproj \
                   -scheme BLEProxy \
                   -sdk iphoneos \
                   -configuration Release \
                   -archivePath $PWD/build/BLEProxy.xcarchive \
                   clean archive \
                   CODE_SIGN_STYLE=Manual \
                   DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM_ID" \
                   CODE_SIGN_IDENTITY="iPhone Distribution" \
                   PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_NAME"

    - name: Export IPA
      env:
        EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      run: |
        cd ios-app
        
        # Create export options plist
        echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode > $PWD/exportOptions.plist
        
        # Export archive to IPA
        xcodebuild -exportArchive \
                   -archivePath $PWD/build/BLEProxy.xcarchive \
                   -exportOptionsPlist $PWD/exportOptions.plist \
                   -exportPath $PWD/build/

    - name: Upload to TestFlight
      if: github.event.inputs.deploy_to_testflight == 'true' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      run: |
        cd ios-app
        
        # Create API key file
        mkdir -p ~/.appstoreconnect/private_keys/
        echo -n "$APP_STORE_CONNECT_API_KEY" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
        
        # Upload to TestFlight
        xcrun altool --upload-app \
                     --type ios \
                     --file build/BLEProxy.ipa \
                     --apiKey $APP_STORE_CONNECT_API_KEY_ID \
                     --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID

    - name: Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          ios-app/build/BLEProxy.xcarchive
          ios-app/build/BLEProxy.ipa
        retention-days: 30

    - name: Clean up Keychain and Provisioning Profile
      if: always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
        rm -f ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision || true

    - name: Notify Success
      if: success() && (github.event.inputs.deploy_to_testflight == 'true' || (github.ref == 'refs/heads/main' && github.event_name == 'push'))
      run: |
        echo "‚úÖ iOS app successfully deployed to TestFlight!"
        echo "üîó Check TestFlight status in App Store Connect"
        echo "üì± Build: ${{ github.run_number }}"
        echo "üè∑Ô∏è Commit: ${{ github.sha }}" 
